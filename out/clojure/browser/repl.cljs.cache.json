["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:shadow/js-access-properties",["^4",["body"]],"~:name","~$clojure.browser.repl","~:imports",null,"~:requires",["^ ","~$goog.dom","^:","~$json","~$goog.json","~$goog.userAgent.product","^=","^<","^<","~$garray","~$goog.array","~$gobj","~$goog.object","^A","^A","~$gdom","^:","~$net","~$clojure.browser.net","^D","^D","~$product","^=","~$event","~$clojure.browser.event","~$cljs.repl","^H","^?","^?","^G","^G"],"~:cljs.spec/speced-vars",[],"~:shadow/js-access-global",["^4",["alert","document","Error","setTimeout","COMPILED"]],"~:uses",null,"~:defs",["^ ","~$send-result",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","~:line",80,"~:column",7,"~:end-line",80,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^V",[["~$connection","~$url","~$data"]]]]]],"^6","~$clojure.browser.repl/send-result","~:variadic",false,"^P","out\\clojure\\browser\\repl.cljs","^T",18,"~:method-params",["^V",[["^X","^Y","^Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"^Q",80,"^S",80,"~:max-fixed-arity",3,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X","^Y","^Z"]]]]]],"~$xpc-connection",["^ ","^6","~$clojure.browser.repl/xpc-connection","^P","out\\clojure\\browser\\repl.cljs","^Q",35,"^R",1,"^S",35,"^T",20,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",35,"^R",6,"^S",35,"^T",20],"~:tag","~$any"],"~$PORT",["^ ","^6","~$clojure.browser.repl/PORT","^P","out\\clojure\\browser\\repl.cljs","^Q",32,"^R",1,"^S",32,"^T",18,"^18","~$number","~:declared",true,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",32,"^R",14,"^S",32,"^T",18,"^18","^1<","^1=",true]],"~$print-queue",["^ ","^6","~$clojure.browser.repl/print-queue","^P","out\\clojure\\browser\\repl.cljs","^Q",37,"^R",1,"^S",37,"^T",17,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",37,"^R",6,"^S",37,"^T",17],"^18","~$array"],"~$get-ua-product",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",56,"^R",7,"^S",56,"^T",21,"^U",["^V",["^W",["^V",[[]]]]]],"^6","~$clojure.browser.repl/get-ua-product","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",21,"^11",["^V",[[]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",56,"^S",56,"^14",0,"^15",true,"^U",["^V",["^W",["^V",[[]]]]]],"~$bootstrap",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",161,"^R",7,"^S",161,"^T",16,"^U",["^V",["^W",["^V",[[]]]]],"~:doc","Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load."],"^6","~$clojure.browser.repl/bootstrap","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",16,"^11",["^V",[[]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",161,"^S",161,"^14",0,"^15",true,"^U",["^V",["^W",["^V",[[]]]]],"^1D","Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load."],"~$connect",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",220,"^R",7,"^S",220,"^T",14,"^U",["^V",["^W",["^V",[["~$repl-server-url"]]]]],"^1D","Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function."],"^6","~$clojure.browser.repl/connect","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",14,"^11",["^V",[["^1G"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",220,"^S",220,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^1G"]]]]],"^1D","Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function."],"~$HOST",["^ ","^6","~$clojure.browser.repl/HOST","^P","out\\clojure\\browser\\repl.cljs","^Q",31,"^R",1,"^S",31,"^T",18,"^18","~$string","^1=",true,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",31,"^R",14,"^S",31,"^T",18,"^18","^1K","^1=",true]],"~$repl-print",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",47,"^R",7,"^S",47,"^T",17,"^U",["^V",["^W",["^V",[["^Z"]]]]]],"^6","~$clojure.browser.repl/repl-print","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",17,"^11",["^V",[["^Z"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",47,"^S",47,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^Z"]]]]]],"~$parent-connected?",["^ ","^6","~$clojure.browser.repl/parent-connected?","^P","out\\clojure\\browser\\repl.cljs","^Q",36,"^R",1,"^S",36,"^T",23,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",36,"^R",6,"^S",36,"^T",23],"^18","^19"],"~$evaluate-javascript",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",63,"^R",7,"^S",63,"^T",26,"^U",["^V",["^W",["^V",[["~$conn","~$block"]]]]],"^1D","Process a single block of JavaScript received from the server"],"^6","~$clojure.browser.repl/evaluate-javascript","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",26,"^11",["^V",[["^1Q","^1R"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",63,"^S",63,"^14",2,"^15",true,"^U",["^V",["^W",["^V",[["^1Q","^1R"]]]]],"^1D","Process a single block of JavaScript received from the server"],"~$flush-print-queue!",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",39,"^R",7,"^S",39,"^T",25,"^U",["^V",["^W",["^V",[["^1Q"]]]]]],"^6","~$clojure.browser.repl/flush-print-queue!","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",25,"^11",["^V",[["^1Q"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",39,"^S",39,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^1Q"]]]]]],"~$wrap-message",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",99,"^R",7,"^S",99,"^T",19,"^U",["^V",["^W",["^V",[["~$repl","~$t","^Z"]]]]]],"^6","~$clojure.browser.repl/wrap-message","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",19,"^11",["^V",[["^1W","~$t","^Z"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",99,"^S",99,"^14",3,"^15",true,"^U",["^V",["^W",["^V",[["^1W","~$t","^Z"]]]]]],"~$start-evaluator",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",106,"^R",7,"^S",106,"^T",22,"^U",["^V",["^W",["^V",[["^Y"]]]]],"^1D","Start the REPL server connection."],"^6","~$clojure.browser.repl/start-evaluator","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",22,"^11",["^V",[["^Y"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",106,"^S",106,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^Y"]]]]],"^1D","Start the REPL server connection."],"~$*repl*",["^ ","^6","~$clojure.browser.repl/*repl*","^P","out\\clojure\\browser\\repl.cljs","^Q",34,"^R",1,"^S",34,"^T",22,"~:dynamic",true,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",34,"^R",16,"^S",34,"^T",22,"^21",true],"^18","~$clj-nil"],"~$load-queue",["^ ","^6","~$clojure.browser.repl/load-queue","^P","out\\clojure\\browser\\repl.cljs","^Q",159,"^R",1,"^S",159,"^T",16,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",159,"^R",6,"^S",159,"^T",16],"^18","^22"],"~$send-print",["^ ","^N",null,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",83,"^R",7,"^S",83,"^T",17,"^U",["^V",["^W",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]]]],"^1D","Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.","~:top-fn",["^ ","^10",false,"^14",3,"^11",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^U",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^13",["^V",[null,null]]]],"^6","~$clojure.browser.repl/send-print","^10",false,"^P","out\\clojure\\browser\\repl.cljs","^T",17,"^26",["^ ","^10",false,"^14",3,"^11",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^U",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^13",["^V",[null,null]]],"^11",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",83,"^S",83,"^14",3,"^15",true,"^U",["^V",[["^Y","^Z"],["^Y","^Z","~$n"]]],"^1D","Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times."],"~$order",["^ ","^6","~$clojure.browser.repl/order","^P","out\\clojure\\browser\\repl.cljs","^Q",97,"^R",1,"^S",97,"^T",11,"^O",["^ ","^P","F:\\cljs\\nastok\\out\\clojure\\browser\\repl.cljs","^Q",97,"^R",6,"^S",97,"^T",11],"^18","^19"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:ack-handshake","~:ready","~:ua-product","~:safari","~:content","~:value","~:type","~:evaluate-javascript","~:peer_uri","~:print","~:firefox","~:success","~:chrome","~:status","~:result","~:ie","~:repl","~:stacktrace","~:order","~:error","~:exception","~:send-result","~:start-handshake"]],"^2P",["^2G","^2A","^2J","^2H","^2M","^2K","^2@","^2C","^2O","^2R","^2I","^2Q","^2N","^2D","^2B","^2P","^2T","^2>","^2?","^2E","^2S","^2L","^2F"]],"^1D","Receive - Eval - Print - Loop\n\n  Receive a block of JS (presumably generated by a ClojureScript compiler)\n  Evaluate it naively\n  Print the result of evaluation to a string\n  Send the resulting string back to the server Loop!"]